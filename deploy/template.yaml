AWSTemplateFormatVersion: "2010-09-09"

Transform:
  - AWS::Serverless-2016-10-31
Description: >-
  This creates the necessary components to deploy Address CRI Frontend onto ECS
  Fargate within an existing VPC and private subnets (imported parameters).
  Address Front can be invoked via the public API Gateway on the url in the
  AddressFrontUrl output.

  The ingress route in summary is: API Gateway -> VPC link -> Private ALB ->
  Address Front ECS Service

  Address Front egress to Address API's API Gateway is via a NAT Gateway which
  should have a route in the provided private subnets' route table.

Parameters:
  Environment:
    Description: The name of the environment to deploy to.
    Type: String
    AllowedPattern: ((production)|(integration)|(staging)|(build)|(dev))
  VpcStackName:
    Description: >
      The name of the stack that defines the VPC in which this container will
      run.
    Type: String
  PermissionsBoundary:
    Description: "The ARN of the permissions boundary to apply when creating IAM roles"
    Type: String
    Default: "none"

Conditions:
  IsNotDevelopment: !Or
    - !Equals [!Ref Environment, build]
    - !Equals [!Ref Environment, staging]
    - !Equals [!Ref Environment, integration]
    - !Equals [!Ref Environment, production]
  IsProduction: !Equals [!Ref Environment, production]

  # This is for performance testing as build and production should be identical
  IsProductionOrBuild: !Or
    - !Equals [!Ref Environment, production]
    - !Equals [!Ref Environment, build]
  IsBuildOrDev: !Or
    - !Equals [!Ref Environment, build]
    - !Equals [!Ref Environment, dev]

  UsePermissionsBoundary:
    Fn::Not:
      - Fn::Equals:
          - !Ref PermissionsBoundary
          - "none"

Mappings:
  EnvironmentConfiguration:
    dev:
      dynatraceSecretArn: arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceNonProductionVariables
    build:
      dynatraceSecretArn: arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceNonProductionVariables
    staging:
      dynatraceSecretArn: arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceNonProductionVariables
    integration:
      dynatraceSecretArn: arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceNonProductionVariables
    production:
      dynatraceSecretArn: arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceProductionVariables
  # see https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-access-logs.html
  ElasticLoadBalancerAccountIds:
    eu-west-2:
      AccountId: 652711504416

Resources:
  # Security Groups for the ECS service and load balancer
  LoadBalancerSG:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: >-
        Address Front LoadBalancer Security Group
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: Allow from anyone on port 80
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      VpcId:
        Fn::ImportValue: !Sub "${VpcStackName}-VpcId"

  LoadBalancerSGEgressToECSSecurityGroup:
    Type: "AWS::EC2::SecurityGroupEgress"
    Properties:
      GroupId: !GetAtt LoadBalancerSG.GroupId
      IpProtocol: tcp
      Description: >-
        Egress between the Address Front load balancer and
        the Address Front ECS security group
      DestinationSecurityGroupId: !GetAtt ECSSecurityGroup.GroupId
      FromPort: 8080
      ToPort: 8080

  ECSSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: >-
        Address Front ECS Security Group permitting outbound
        to anywhere.
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      VpcId:
        Fn::ImportValue: !Sub "${VpcStackName}-VpcId"

  ECSSecurityGroupIngressFromLoadBalancer:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      IpProtocol: tcp
      Description: >-
        Address Front ECS permits inbound from the Address Front
        load balancer.
      FromPort: 8080
      ToPort: 8080
      GroupId: !GetAtt ECSSecurityGroup.GroupId
      SourceSecurityGroupId: !GetAtt LoadBalancerSG.GroupId

  AccessLogsBucket:
    Condition: IsNotDevelopment
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub address-cri-front-${Environment}-access-logs
      VersioningConfiguration:
        Status: "Enabled"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  AddressFrontAccessLogsBucketPolicy:
    Condition: IsNotDevelopment
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref AccessLogsBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub
                - "arn:aws:iam::${ElbAccountId}:root"
                - ElbAccountId:
                    !FindInMap [
                      ElasticLoadBalancerAccountIds,
                      !Ref AWS::Region,
                      AccountId,
                    ]
            Action:
              - s3:PutObject
            Resource:
              - !Sub arn:aws:s3:::${AccessLogsBucket}/address-front-${Environment}/AWSLogs/${AWS::AccountId}/*

  # Private Application Load Balancer
  LoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Scheme: internal
      SecurityGroups:
        - !GetAtt LoadBalancerSG.GroupId
      Subnets:
        - Fn::ImportValue: !Sub "${VpcStackName}-PrivateSubnetIdA"
        - Fn::ImportValue: !Sub "${VpcStackName}-PrivateSubnetIdB"
      Type: application
      LoadBalancerAttributes: !If
        - IsNotDevelopment
        - - Key: access_logs.s3.enabled
            Value: true
          - Key: access_logs.s3.bucket
            Value: !Ref AccessLogsBucket
          - Key: access_logs.s3.prefix
            Value: !Sub address-front-${Environment}
        - !Ref AWS::NoValue

  LoadBalancerListenerTargetGroupECS:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      HealthCheckEnabled: TRUE
      HealthCheckProtocol: HTTP
      HealthCheckPath: /healthcheck
      HealthCheckTimeoutSeconds: 2
      HealthCheckIntervalSeconds: 5
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: 200
      Port: 80
      Protocol: HTTP
      TargetType: ip
      VpcId:
        Fn::ImportValue: !Sub "${VpcStackName}-VpcId"
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 30

  LoadBalancerListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref LoadBalancerListenerTargetGroupECS
          Type: forward
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

  # ECS cluster, service and task definition
  AddressFrontEcsCluster:
    Type: "AWS::ECS::Cluster"
    Properties:
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ECSCluster"
        - Key: Product
          Value: "GOV.UK sign in"
        - Key: System
          Value: "Address CRI"
        - Key: Environment
          Value: !Sub "${Environment}"

  AddressFrontEcsService:
    Type: "AWS::ECS::Service"
    Properties:
      Cluster: !Ref AddressFrontEcsCluster
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
        DeploymentCircuitBreaker:
          Enable: TRUE
          Rollback: TRUE
      DesiredCount: 2
      EnableECSManagedTags: false
      HealthCheckGracePeriodSeconds: 60
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: app
          ContainerPort: 8080
          TargetGroupArn: !Ref LoadBalancerListenerTargetGroupECS
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !GetAtt ECSSecurityGroup.GroupId
          Subnets:
            - Fn::ImportValue: !Sub "${VpcStackName}-PrivateSubnetIdA"
            - Fn::ImportValue: !Sub "${VpcStackName}-PrivateSubnetIdB"
      TaskDefinition: !Ref ECSServiceTaskDefinition
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ECS"
        - Key: Product
          Value: "GOV.UK sign in"
        - Key: System
          Value: "Address CRI"
        - Key: Environment
          Value: !Sub "${Environment}"
    DependsOn:
      - LoadBalancerListener

  ECSAccessLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/ecs/${AWS::StackName}-AddressFront-ECS
      RetentionInDays: 14

  ECSAccessLogsGroupSubscriptionFilterCSLS:
    Type: AWS::Logs::SubscriptionFilter
    Condition: IsNotDevelopment
    Properties:
      DestinationArn: "arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython"
      FilterPattern: ""
      LogGroupName: !Ref ECSAccessLogsGroup

  ECSServiceTaskDefinition:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      ContainerDefinitions:
        - Essential: true
          Image: CONTAINER-IMAGE-PLACEHOLDER
          Name: app
          Environment:
            - Name: API_BASE_URL
              Value: !Sub
                - "https://${APIGatewayId}.execute-api.eu-west-2.amazonaws.com/${Environment}"
                - APIGatewayId:
                    Fn::ImportValue: address-cri-api-v1-PrivateAddressApiGatewayId
                  Environment: !Ref Environment
            - Name: EXTERNAL_WEBSITE_HOST
              Value: !GetAtt ApiGwHttpEndpoint.ApiEndpoint
            - Name: SESSION_TABLE_NAME
              Value: !Sub
                - "cri-address-front-sessions-${Environment}"
                - Environment: !Ref Environment
            - Name: UA_CONTAINER_ID
              Value: !If [IsProduction, "GTM-TT5HDKV", "GTM-TK92W68"]
            - Name: ANALYTICS_COOKIE_DOMAIN
              Value:
                !If [
                  IsProduction,
                  "account.gov.uk",
                  !Sub "${Environment}.account.gov.uk",
                ]
            - Name: LANGUAGE_TOGGLE_DISABLED
              Value: true
            - Name: LOG_LEVEL
              Value: !If [IsBuildOrDev, "info", "request"]
          Secrets:
            - Name: DT_TENANT
              ValueFrom: !Join
                - ""
                - - !FindInMap [
                      EnvironmentConfiguration,
                      !Ref Environment,
                      dynatraceSecretArn,
                    ]
                  - ":DT_TENANT::"
            - Name: DT_TENANTTOKEN
              ValueFrom: !Join
                - ""
                - - !FindInMap [
                      EnvironmentConfiguration,
                      !Ref Environment,
                      dynatraceSecretArn,
                    ]
                  - ":DT_TENANTTOKEN::"
            - Name: DT_CONNECTION_POINT
              ValueFrom: !Join
                - ""
                - - !FindInMap [
                      EnvironmentConfiguration,
                      !Ref Environment,
                      dynatraceSecretArn,
                    ]
                  - ":DT_CONNECTION_POINT::"
          PortMappings:
            - ContainerPort: 8080
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ECSAccessLogsGroup
              awslogs-region: !Sub ${AWS::Region}
              awslogs-stream-prefix: !Sub address-front-${Environment}
      Cpu: "1024"
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      Memory: "2048"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-TaskDefinition"
        - Key: Product
          Value: "GOV.UK sign in"
        - Key: System
          Value: "Address CRI"
        - Key: Environment
          Value: !Sub "${Environment}"

  ECSTaskExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: "sts:AssumeRole"
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      Policies:
        - PolicyName: PullAddressFrontImage
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "ecr:BatchGetImage"
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:GetAuthorizationToken"
                Resource:
                  - "*"
              - Effect: Allow
                Action:
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource:
                  - !GetAtt "ECSAccessLogsGroup.Arn"
                  - !Sub "${ECSAccessLogsGroup.Arn}:*"
        - PolicyName: DynatraceGetSecrets
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "secretsmanager:GetSecretValue" #pragma: allowlist secret
                Resource:
                  - "arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceNonProductionVariables*"
                  - "arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceProductionVariables*"
              - Effect: Allow
                Action:
                  - "secretsmanager:ListSecrets" #pragma: allowlist secret
                Resource:
                  - "arn:aws:secretsmanager:eu-west-2:216552277552:secret:*"
              - Effect: Allow
                Action:
                  - "kms:Decrypt"
                Resource:
                  - "arn:aws:kms:eu-west-2:216552277552:key/*"
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue

  ECSTaskRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: "sts:AssumeRole"
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      Policies:
        - PolicyName: AddressFrontDynamoDBSessionAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "dynamodb:BatchGetItem"
                  - "dynamodb:DescribeTable"
                  - "dynamodb:GetItem"
                  - "dynamodb:Query"
                  - "dynamodb:Scan"
                  - "dynamodb:BatchWriteItem"
                  - "dynamodb:DeleteItem"
                  - "dynamodb:UpdateItem"
                  - "dynamodb:PutItem"
                Resource:
                  - !GetAtt AddressFrontSessionsTable.Arn
        - PolicyName: DynatraceGetSecrets
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "secretsmanager:GetSecretValue" #pragma: allowlist secret
                Resource:
                  - "arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceNonProductionVariables*"
                  - "arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceProductionVariables*"
              - Effect: Allow
                Action:
                  - "secretsmanager:ListSecrets" #pragma: allowlist secret
                Resource:
                  - "arn:aws:secretsmanager:eu-west-2:216552277552:secret:*"
              - Effect: Allow
                Action:
                  - "kms:Decrypt"
                Resource:
                  - "arn:aws:kms:eu-west-2:216552277552:key/*"
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue

  ApiGwHttpEndpoint:
    Type: "AWS::ApiGatewayV2::Api"
    Properties:
      Name: !Sub address-front-${Environment}
      ProtocolType: HTTP

  ApiGwHttpEndpointIntegration:
    Type: "AWS::ApiGatewayV2::Integration"
    Properties:
      ApiId: !Ref ApiGwHttpEndpoint
      IntegrationType: HTTP_PROXY
      ConnectionId:
        Fn::ImportValue: !Sub "${VpcStackName}-VpcLinkId"
      ConnectionType: VPC_LINK
      IntegrationMethod: ANY
      IntegrationUri: !Ref LoadBalancerListener
      PayloadFormatVersion: "1.0"

  APIGWRoute:
    Type: "AWS::ApiGatewayV2::Route"
    Properties:
      ApiId: !Ref ApiGwHttpEndpoint
      RouteKey: "ANY /{proxy+}"
      Target: !Join
        - /
        - - integrations
          - !Ref ApiGwHttpEndpointIntegration

  APIStageDefault:
    Type: "AWS::ApiGatewayV2::Stage"
    Properties:
      ApiId: !Ref ApiGwHttpEndpoint
      StageName: $default
      AutoDeploy: true
      AccessLogSettings:
        DestinationArn: !GetAtt APIGWAccessLogsGroup.Arn
        Format: >-
          {
          "requestId":"$context.requestId",
          "ip": "$context.identity.sourceIp",
          "requestTime":"$context.requestTime",
          "httpMethod":"$context.httpMethod",
          "path": "$context.path",
          "routeKey":"$context.routeKey",
          "status":"$context.status",
          "protocol":"$context.protocol",
          "responseLength":"$context.responseLength"
          }

  APIGWAccessLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/apigateway/${AWS::StackName}-AddressFront-API-GW-AccessLogs

  APIGWAccessLogsGroupSubscriptionFilterCSLS:
    Type: AWS::Logs::SubscriptionFilter
    Condition: IsNotDevelopment
    Properties:
      DestinationArn: "arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython"
      FilterPattern: ""
      LogGroupName: !Ref APIGWAccessLogsGroup

  # ECS Autoscaling
  # The number of pods will increase when the configured CPU utilization is breached for more than 3 minutes.
  # Scaling down will occur after 15 minutes of 90% utilization of the configured CPU utilization.

  ECSAutoScalingTarget:
    Condition: IsProductionOrBuild
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 60
      MinCapacity: 2
      ResourceId: !Join
        - "/"
        - - "service"
          - !Ref AddressFrontEcsCluster
          - !GetAtt AddressFrontEcsService.Name
      RoleARN: !Sub "arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService"
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  ECSAutoScalingPolicy:
    Condition: IsProductionOrBuild
    DependsOn: ECSAutoScalingTarget
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: ECSAutoScalingPolicy
      PolicyType: TargetTrackingScaling
      ResourceId: !Join
        - "/"
        - - "service"
          - !Ref AddressFrontEcsCluster
          - !GetAtt AddressFrontEcsService.Name
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        TargetValue: 60
        ScaleInCooldown: 420
        ScaleOutCooldown: 60

  StepScaleInPolicy:
    Condition: IsProductionOrBuild
    DependsOn: ECSAutoScalingTarget
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: StepScalingInPolicy
      PolicyType: StepScaling
      ResourceId: !Join
        - "/"
        - - "service"
          - !Ref AddressFrontEcsCluster
          - !GetAtt AddressFrontEcsService.Name
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      StepScalingPolicyConfiguration:
        AdjustmentType: PercentChangeInCapacity
        Cooldown: 420
        StepAdjustments:
          - MetricIntervalUpperBound: -40
            ScalingAdjustment: -50

  StepScaleOutPolicy:
    Condition: IsProductionOrBuild
    DependsOn: ECSAutoScalingTarget
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: StepScalingOutPolicy
      PolicyType: StepScaling
      ResourceId: !Join
        - "/"
        - - "service"
          - !Ref AddressFrontEcsCluster
          - !GetAtt AddressFrontEcsService.Name
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      StepScalingPolicyConfiguration:
        AdjustmentType: PercentChangeInCapacity
        Cooldown: 120
        MinAdjustmentMagnitude: 5
        StepAdjustments:
          - MetricIntervalLowerBound: 20
            MetricIntervalUpperBound: 30
            ScalingAdjustment: 200
          - MetricIntervalLowerBound: 30
            MetricIntervalUpperBound: 35
            ScalingAdjustment: 300
          - MetricIntervalLowerBound: 35
            ScalingAdjustment: 500

  StepScaleOutAlarm:
    Condition: IsProductionOrBuild
    DependsOn: ECSAutoScalingTarget
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: true
      AlarmActions:
        - !Ref StepScaleOutPolicy
      AlarmDescription: "AddressFrontClusterOver60PercentCPU"
      ComparisonOperator: "GreaterThanThreshold"
      DatapointsToAlarm: "2"
      Dimensions:
        - Name: ClusterName
          Value: !Ref AddressFrontEcsCluster
        - Name: ServiceName
          Value: !GetAtt AddressFrontEcsService.Name
      Unit: "Percent"
      EvaluationPeriods: "2"
      MetricName: "CPUUtilization"
      Namespace: "AWS/ECS"
      Statistic: "Average"
      Period: "60"
      Threshold: "60"

  StepScaleInAlarm:
    Condition: IsProductionOrBuild
    DependsOn: ECSAutoScalingTarget
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: true
      AlarmActions:
        - !Ref StepScaleInPolicy
      AlarmDescription: "AddressFrontClusterUnder60PercentCPU"
      ComparisonOperator: "LessThanThreshold"
      DatapointsToAlarm: "5"
      Dimensions:
        - Name: ClusterName
          Value: !Ref AddressFrontEcsCluster
        - Name: ServiceName
          Value: !GetAtt AddressFrontEcsService.Name
      Unit: "Percent"
      EvaluationPeriods: "5"
      MetricName: "CPUUtilization"
      Namespace: "AWS/ECS"
      Statistic: "Average"
      Period: "60"
      Threshold: "60"

  AddressFrontSessionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      # checkov:skip=CKV_AWS_28: Point in time recovery is not necessary for this table.
      TableName: !Sub "cri-address-front-sessions-${Environment}"
      BillingMode: "PAY_PER_REQUEST"
      AttributeDefinitions:
        - AttributeName: "id"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "id"
          KeyType: "HASH"
      TimeToLiveSpecification:
        AttributeName: "expires"
        Enabled: true
      SSESpecification:
        # checkov:skip=CKV_AWS_119: Implement Customer Managed Keys in PYIC-1391
        SSEEnabled: true
        SSEType: KMS

  AddressNoTaskCountAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: !Sub Address ${Environment} frontend no ECS service tasks
      ActionsEnabled: true
      AlarmActions:
        - !ImportValue core-infrastructure-AlarmTopic
      OKActions: []
      InsufficientDataActions: []
      MetricName: TaskCount
      Namespace: ECS/ContainerInsights
      Statistic: Average
      Dimensions:
        - Name: ClusterName
          Value: !Ref AddressFrontEcsCluster
      Period: 60
      EvaluationPeriods: 2
      DatapointsToAlarm: 2
      Threshold: 1
      ComparisonOperator: LessThanThreshold
      TreatMissingData: breaching

  AddressOnlyOneTaskCountAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: !Sub Address ${Environment} frontend below desired ECS service tasks
      ActionsEnabled: true
      AlarmActions:
        - !ImportValue core-infrastructure-AlarmTopic
      OKActions: []
      InsufficientDataActions: []
      MetricName: TaskCount
      Namespace: ECS/ContainerInsights
      Statistic: Average
      Dimensions:
        - Name: ClusterName
          Value: !Ref AddressFrontEcsCluster
      Period: 300
      EvaluationPeriods: 3
      DatapointsToAlarm: 3
      Threshold: 2
      ComparisonOperator: LessThanThreshold
      TreatMissingData: breaching

  Address5XXOnELB:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: !Sub Address ${Environment} frontend 5XX count
      ActionsEnabled: true
      AlarmActions:
        - !ImportValue core-infrastructure-AlarmTopic
      OKActions: []
      InsufficientDataActions: []
      MetricName: HTTPCode_Target_5XX_Count
      Namespace: AWS/ApplicationELB
      Statistic: Sum
      Dimensions:
        - Name: TargetGroup
          Value: !Ref LoadBalancerListenerTargetGroupECS
        - Name: LoadBalancer
          Value: !Ref LoadBalancer
      Period: 60
      EvaluationPeriods: 5
      DatapointsToAlarm: 5
      Threshold: 1
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching

Outputs:
  StackName:
    Description: "CloudFormation stack name"
    Value: !Sub "${AWS::StackName}"
  AddressFrontUrl:
    Description: >-
      The API Gateway URL which Address Front can be invoked on.
    Value: !GetAtt ApiGwHttpEndpoint.ApiEndpoint
  AddressFrontGatewayId:
    Description: Address Front API Gateway ID
    Export:
      Name: !Sub "${AWS::StackName}-AddressFrontGatewayId"
    Value: !Ref ApiGwHttpEndpoint
  AddressLoadBalancerArn:
    Description: The Fargate Front End Load Balancer ARN
    Export:
      Name: !Sub "${AWS::StackName}-LoadBalancer"
    Value: !Ref LoadBalancer
